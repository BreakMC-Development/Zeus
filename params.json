{"name":"Zeus","tagline":"An annotation based command system inspired by @sk89q 's and @DSH105 's command systems projects. ","body":"Zeus ![Alt text](https://travis-ci.org/BreakMC-Development/Zeus.svg?branch=master \"Build Status\") \r\n====\r\n\r\nAn annotation based command system inspired by @sk89q 's and @DSH105 's command systems projects.  \r\n\r\n### Features\r\n+ An annotated command system.\r\n+ No need to register your plugins into your plugin.yml\r\n+ Easy class based command registration.\r\n+ Simple to use!\r\n+ Override default Bukkit commands by default!\r\n\r\n### TODO\r\n+ Sub-command system.\r\n+ Custom methods instead of a set method.\r\n\r\n### Documentation\r\n\r\nHow to create a command:\r\n At the moment you must have your command method consist of two parameters.\r\n `CommandSender`(Or any sub type) and `String[]`, in that order. The arguments can be named anything of course.\r\n It is recommended for the method to be void.\r\n\r\n To specify that method is a command, you must have the `@Command` annotation.\r\n You can specify various command information, but the one thing needed is the `name` parameter.\r\n `name` is simply the name of the command. Below are other parameters:\r\n   + `aliases` Type: `String[]` About: The aliases for the command.\r\n   + `desc` Type: `String` About: The description of the command.\r\n   + `usage` Type: `String` About: The usage of the command.\r\n   + `permission` Type: `String` About: The permission used for the command.\r\n   + `minArgs` Type: `int` About: The minimum number of arguments for the command.\r\n   + `maxArgs` Type: `int` About: The maximum number of arguments for the command.\r\n\r\n Example(A custom /stop command for teh lawls):\r\n ```java\r\n @Command(name=\"stop\", aliases = {\"staph\"}, usage = \"/<command>\", permission = \"admin.stop\", desc = \"Stops the server.\")\r\n    public void stopServer(CommandSender sender, String[] args) {\r\n       sender.sendMessage(ChatColor.GREEN + \"Stopping server...\");\r\n        Bukkit.getServer().savePlayers();\r\n        for(World world : Bukkit.getServer().getWorlds()) {\r\n            world.save();\r\n        }\r\n        Bukkit.getServer().shutdown();\r\n    }\r\n ```\r\n\r\nHow to register command(s):\r\n  In your main class have a variable like this:\r\n    `Registrar registrar;`\r\n  Then in your onEnable initialize it:\r\n    `registrar = new BukkitRegistrar();`\r\n\r\n  If you want to register all methods(commands) in a class simply do:\r\n    ```\r\n    registrar.registerAll(<Instance of class annotation is in>); \r\n    ```\r\n   and it will register every method that has the `@Command` annotation and the proper parameters.\r\n\r\n If you want to register just one command:\r\n   ```java\r\n   registrar.registerCommand(<NameOfCommand>, <Instance of class annotation is in>);\r\n   ```\r\n and it will only register that one command.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}